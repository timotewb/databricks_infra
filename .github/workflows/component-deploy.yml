name: 1a. Component Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      component:
        required: true
        type: string
      terraform_action:
        required: false
        type: string
        default: "plan"
      allow_destructive:
        required: false
        type: string
        default: "no"

permissions:
  id-token: write
  contents: read

jobs:
  component:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ format('./main/{0}', inputs.component) }}
    env:
      TF_VAR_environment: ${{ inputs.environment }}
      ARM_USE_OIDC: "true" 
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ALLOW_CHANGES: ${{ inputs.allow_changes }}
      ALLOW_DESTRUCTIVE: ${{ inputs.allow_destructive }}

    steps:
      - name: Echo Azure Client ID
        run: |
          echo AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}      

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="../../modules/backend/common.tfbackend" \
            -backend-config="container_name=${{ inputs.environment }}" \
            -backend-config="key=${{ inputs.component }}/terraform.tfstate"
        
      - name: Terraform Plan
        if: inputs.terraform_action == 'plan' || inputs.terraform_action == 'apply'
        id: plan
        run: |
          terraform plan -var-file="../config/${{ inputs.environment }}/${{ inputs.component }}-${{ inputs.environment }}.tfvars" -no-color -out=tfplan
          terraform show -no-color tfplan > tfplan.txt
          cat tfplan.txt

          if grep -q "No changes. Your infrastructure matches the configuration." tfplan.txt; then
            echo "âœ… No changes detected. Skipping apply."
            echo "apply_needed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          destroys=$(grep "^  - destroy" tfplan.txt | wc -l)
          if [ "$destroys" -gt 0 ] && [ "$ALLOW_DESTRUCTIVE" != "yes" ]; then
            echo "::error::ðŸš« Destructive changes detected while set to prevent. Aborting."
            exit 1
          fi

          echo "apply_needed=true" >> "$GITHUB_OUTPUT"

      - name: Terraform Apply
        if: inputs.terraform_action == 'apply' && steps.plan.outputs.apply_needed == 'true'
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: inputs.terraform_action == 'destroy'
        run: |
          terraform destroy -var-file="../config/${{ inputs.environment }}/${{ inputs.component }}-${{ inputs.environment }}.tfvars" -auto-approve


